FROM node:22.2-alpine as node-alpine

# Always install security updated e.g. https://pythonspeed.com/articles/security-updates-in-docker/
# Update local cache so that other stages don't need to update cache
RUN apk update \
    && apk upgrade


FROM node-alpine as base

RUN apk add --no-cache libc6-compat

ARG PNPM_VERSION=9.1.4

RUN corepack enable && corepack prepare pnpm@${PNPM_VERSION} --activate

WORKDIR /workspace

COPY pnpm-lock.yaml .

RUN pnpm fetch


FROM base as builder


WORKDIR /workspace

COPY *.yaml *.json ./
COPY packages ./packages
COPY apps/vpnmanager ./apps/vpnmanager

# Use virtual store: https://pnpm.io/cli/fetch#usage-scenario
RUN pnpm install --recursive --offline --frozen-lockfile

# NOTE: ARG values are only available **after** ARG statement & hence we need
#       to separate NEXT_PUBLIC_APP_URL and PAYLOAD_PUBLIC_APP_URL into
#       multiple ARG statements so that PAYLOAD can use the value defined
#       in NEXT.
ARG PORT=3000 \
    # Sentry config for source maps upload (needed at build time only)
    SENTRY_AUTH_TOKEN="" \
    SENTRY_ENV="local" \
    SENTRY_ORG="" \
    SENTRY_PROJECT="" \
    SENTRY_DSN=""
RUN pnpm build --filter=vpnmanager

FROM builder as runner

RUN rm -rf /var/cache/apk/*

ARG PORT \
    SENTRY_ENV

ENV NODE_ENV=production \
    PORT=${PORT} \
    SENTRY_ENV=${SENTRY_ENV} \
    SENTRY_DSN=${SENTRY_DSN} \
    SENTRY_ORG=${SENTRY_ORG} \
    SENTRY_PROJECT=${SENTRY_PROJECT} \
    SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}

WORKDIR /workspace/apps/vpnmanager

EXPOSE ${PORT}

CMD [ "pnpm", "run", "start" ]
