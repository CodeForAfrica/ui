/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    media: Media;
    pages: Page;
    users: User;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    'settings-site': SettingsSite;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  fullTitle?: string | null;
  slug?: string | null;
  blocks?:
    | (
        | {
            title: string;
            subtitle: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'page-header';
          }
        | {
            heroHeaders?:
              | {
                  headingType?: ('largeHeading' | 'subHeading' | 'rotatingText') | null;
                  title?: string | null;
                  id?: string | null;
                }[]
              | null;
            heroDescriptiveText: {
              [k: string]: unknown;
            }[];
            heroButtonText?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'page-hero';
          }
        | {
            toolTipText: string;
            steps?:
              | (
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      defaultFetchExistingRobots?: boolean | null;
                      existingRobotsTxt: string;
                      placeholder: string;
                      urlValidationError: string;
                      fetch: string;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'existing-robots';
                    }
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      crawlDelay: {
                        label: string;
                        title: string;
                      };
                      cacheDelay: {
                        label: string;
                        title: string;
                      };
                      visitTime: {
                        label: string;
                        title: string;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'delays';
                    }
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      selectPlatform: {
                        label: string;
                        title: string;
                      };
                      disallowedPaths: {
                        label: string;
                        title: string;
                      };
                      allowedPaths: {
                        label: string;
                        title: string;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'paths';
                    }
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      aiWebCrawlers: {
                        label: string;
                        title: string;
                      };
                      searchEngineCrawlers: {
                        label: string;
                        title: string;
                      };
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'block-bots';
                    }
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      placeholder: string;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'site-maps';
                    }
                  | {
                      title: string;
                      hint?:
                        | {
                            [k: string]: unknown;
                          }[]
                        | null;
                      placeholder: string;
                      id?: string | null;
                      blockName?: string | null;
                      blockType: 'finish';
                    }
                )[]
              | null;
            labels: {
              continue: string;
              back: string;
              reset: string;
              download: string;
              copyToClipboard: string;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'robo-form';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: string | Media | null;
  };
  parent?: (string | null) | Page;
  breadcrumbs?:
    | {
        doc?: (string | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  roles: ('admin' | 'editor')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings-site".
 */
export interface SettingsSite {
  id: string;
  title: string;
  description: {
    [k: string]: unknown;
  }[];
  primaryLogo: string | Media;
  secondaryLogo?: string | Media | null;
  primaryNavigation?: {
    menus?:
      | {
          label: string;
          linkType?: ('custom' | 'internal') | null;
          doc?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          href: string;
          id?: string | null;
        }[]
      | null;
    connect?: ('Facebook' | 'Twitter' | 'Instagram' | 'Linkedin' | 'Github' | 'Slack') | null;
  };
  secondaryNavigation?: {
    menus?:
      | {
          label: string;
          linkType?: ('custom' | 'internal') | null;
          doc?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          href: string;
          id?: string | null;
        }[]
      | null;
  };
  connect: {
    title: string;
    links?:
      | {
          platform: 'Facebook' | 'Twitter' | 'Instagram' | 'Linkedin' | 'Github' | 'Slack';
          url: string;
          id?: string | null;
        }[]
      | null;
  };
  newsletter: {
    title: string;
    embedCode: string;
  };
  initiative: {
    title: string;
    description: {
      [k: string]: unknown;
    }[];
    partners?:
      | {
          name: string;
          logo: string | Media;
          label: string;
          linkType?: ('custom' | 'internal') | null;
          doc?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          href: string;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}