/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | "Pacific/Midway"
  | "Pacific/Niue"
  | "Pacific/Honolulu"
  | "Pacific/Rarotonga"
  | "America/Anchorage"
  | "Pacific/Gambier"
  | "America/Los_Angeles"
  | "America/Tijuana"
  | "America/Denver"
  | "America/Phoenix"
  | "America/Chicago"
  | "America/Guatemala"
  | "America/New_York"
  | "America/Bogota"
  | "America/Caracas"
  | "America/Santiago"
  | "America/Buenos_Aires"
  | "America/Sao_Paulo"
  | "Atlantic/South_Georgia"
  | "Atlantic/Azores"
  | "Atlantic/Cape_Verde"
  | "Europe/London"
  | "Europe/Berlin"
  | "Africa/Lagos"
  | "Europe/Athens"
  | "Africa/Cairo"
  | "Europe/Moscow"
  | "Asia/Riyadh"
  | "Asia/Dubai"
  | "Asia/Baku"
  | "Asia/Karachi"
  | "Asia/Tashkent"
  | "Asia/Calcutta"
  | "Asia/Dhaka"
  | "Asia/Almaty"
  | "Asia/Jakarta"
  | "Asia/Bangkok"
  | "Asia/Shanghai"
  | "Asia/Singapore"
  | "Asia/Tokyo"
  | "Asia/Seoul"
  | "Australia/Brisbane"
  | "Australia/Sydney"
  | "Pacific/Guam"
  | "Pacific/Noumea"
  | "Pacific/Auckland"
  | "Pacific/Fiji";

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    media: Media;
    pages: Page;
    posts: Post;
    tags: Tag;
    donors: Donor;
    partners: Partner;
    resources: Resource;
    users: User;
    "payload-locked-documents": PayloadLockedDocument;
    "payload-preferences": PayloadPreference;
    "payload-migrations": PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    donors: DonorsSelect<false> | DonorsSelect<true>;
    partners: PartnersSelect<false> | PartnersSelect<true>;
    resources: ResourcesSelect<false> | ResourcesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    "payload-locked-documents":
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>;
    "payload-preferences":
      | PayloadPreferencesSelect<false>
      | PayloadPreferencesSelect<true>;
    "payload-migrations":
      | PayloadMigrationsSelect<false>
      | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    "site-settings": SiteSetting;
  };
  globalsSelect: {
    "site-settings": SiteSettingsSelect<false> | SiteSettingsSelect<true>;
  };
  locale: "en";
  user: User & {
    collection: "users";
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  createdBy?: (string | null) | User;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  role: "administrator" | "editor" | "author";
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  fullTitle?: string | null;
  slug?: string | null;
  blocks?:
    | (
        | {
            slides?:
              | {
                  title: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ("ltr" | "rtl") | null;
                      format:
                        | "left"
                        | "start"
                        | "center"
                        | "right"
                        | "end"
                        | "justify"
                        | "";
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  subtitle: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ("ltr" | "rtl") | null;
                      format:
                        | "left"
                        | "start"
                        | "center"
                        | "right"
                        | "end"
                        | "justify"
                        | "";
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  /**
                   * A brief description of the slide content.
                   */
                  description: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ("ltr" | "rtl") | null;
                      format:
                        | "left"
                        | "start"
                        | "center"
                        | "right"
                        | "end"
                        | "justify"
                        | "";
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  };
                  backgroundImage: string | Media;
                  label: string;
                  linkType?: ("custom" | "internal") | null;
                  doc?: {
                    relationTo: "pages";
                    value: string | Page;
                  } | null;
                  url?: string | null;
                  href: string;
                  newTab?: boolean | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: "hero";
          }
        | {
            title: string;
            donors?: (string | Donor)[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: "donor-overview-list";
          }
        | {
            title: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ("ltr" | "rtl") | null;
                format:
                  | "left"
                  | "start"
                  | "center"
                  | "right"
                  | "end"
                  | "justify"
                  | "";
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            image: string | Media;
            /**
             * Background color in hex format
             */
            backgroundColor: string;
            /**
             * Text color in hex format
             */
            textColor: string;
            id?: string | null;
            blockName?: string | null;
            blockType: "page-header";
          }
        | {
            title: string;
            partners?: (string | Partner)[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: "partner-overview-list";
          }
        | {
            title: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ("ltr" | "rtl") | null;
                format:
                  | "left"
                  | "start"
                  | "center"
                  | "right"
                  | "end"
                  | "justify"
                  | "";
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            image: string | Media;
            /**
             * Background color in hex format
             */
            backgroundColor: string;
            /**
             * Text color in hex format
             */
            textColor: string;
            id?: string | null;
            blockName?: string | null;
            blockType: "what-we-do";
          }
        | {
            title: string;
            resources: (string | Resource)[];
            linkLabel: string;
            id?: string | null;
            blockName?: string | null;
            blockType: "resources-overview-list";
          }
      )[]
    | null;
  parent?: (string | null) | Page;
  breadcrumbs?:
    | {
        doc?: (string | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ("draft" | "published") | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "donors".
 */
export interface Donor {
  id: string;
  name: string;
  slug?: string | null;
  logo: string | Media;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  connect?:
    | {
        platform:
          | "Facebook"
          | "Twitter"
          | "Instagram"
          | "Linkedin"
          | "Github"
          | "Slack";
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners".
 */
export interface Partner {
  id: string;
  name: string;
  slug?: string | null;
  logo: string | Media;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  connect?:
    | {
        platform:
          | "Facebook"
          | "Twitter"
          | "Instagram"
          | "Linkedin"
          | "Github"
          | "Slack";
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources".
 */
export interface Resource {
  id: string;
  title: string;
  slug?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image: string | Media;
  tags?: (string | Tag)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: string;
  name: string;
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  slug?: string | null;
  createdBy?: (string | null) | User;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ("draft" | "published") | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: "media";
        value: string | Media;
      } | null)
    | ({
        relationTo: "pages";
        value: string | Page;
      } | null)
    | ({
        relationTo: "posts";
        value: string | Post;
      } | null)
    | ({
        relationTo: "tags";
        value: string | Tag;
      } | null)
    | ({
        relationTo: "donors";
        value: string | Donor;
      } | null)
    | ({
        relationTo: "partners";
        value: string | Partner;
      } | null)
    | ({
        relationTo: "resources";
        value: string | Resource;
      } | null)
    | ({
        relationTo: "users";
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: "users";
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: "users";
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  fullTitle?: T;
  slug?: T;
  blocks?:
    | T
    | {
        hero?:
          | T
          | {
              slides?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    description?: T;
                    backgroundImage?: T;
                    label?: T;
                    linkType?: T;
                    doc?: T;
                    url?: T;
                    href?: T;
                    newTab?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        "donor-overview-list"?:
          | T
          | {
              title?: T;
              donors?: T;
              id?: T;
              blockName?: T;
            };
        "page-header"?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
              blockName?: T;
            };
        "partner-overview-list"?:
          | T
          | {
              title?: T;
              partners?: T;
              id?: T;
              blockName?: T;
            };
        "what-we-do"?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              backgroundColor?: T;
              textColor?: T;
              id?: T;
              blockName?: T;
            };
        "resources-overview-list"?:
          | T
          | {
              title?: T;
              resources?: T;
              linkLabel?: T;
              id?: T;
              blockName?: T;
            };
      };
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  createdBy?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "donors_select".
 */
export interface DonorsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  logo?: T;
  description?: T;
  connect?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners_select".
 */
export interface PartnersSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  logo?: T;
  description?: T;
  connect?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resources_select".
 */
export interface ResourcesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  image?: T;
  tags?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: string;
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ("ltr" | "rtl") | null;
      format: "left" | "start" | "center" | "right" | "end" | "justify" | "";
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Shown on main navigation bar.
   */
  primaryLogo: string | Media;
  /**
   * Shown on main footer. If not provided, primary logo will be reused.
   */
  secondaryLogo?: (string | null) | Media;
  primaryNavigation?: {
    menus?:
      | {
          label: string;
          linkType?: ("custom" | "internal") | null;
          doc?: {
            relationTo: "pages";
            value: string | Page;
          } | null;
          url?: string | null;
          href: string;
          id?: string | null;
        }[]
      | null;
    connect?:
      | ("Facebook" | "Twitter" | "Instagram" | "Linkedin" | "Github" | "Slack")
      | null;
  };
  secondaryNavigation?: {
    menus?:
      | {
          label: string;
          linkType?: ("custom" | "internal") | null;
          doc?: {
            relationTo: "pages";
            value: string | Page;
          } | null;
          url?: string | null;
          href: string;
          id?: string | null;
        }[]
      | null;
  };
  connect: {
    /**
     * Text that appears on contact links e.g Stay in Touch
     */
    title: string;
    links?:
      | {
          platform:
            | "Facebook"
            | "Twitter"
            | "Instagram"
            | "Linkedin"
            | "Github"
            | "Slack";
          url: string;
          id?: string | null;
        }[]
      | null;
  };
  newsletter: {
    title: string;
    embedCode: string;
  };
  analytics?: {
    analyticsId?: string | null;
  };
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  primaryLogo?: T;
  secondaryLogo?: T;
  primaryNavigation?:
    | T
    | {
        menus?:
          | T
          | {
              label?: T;
              linkType?: T;
              doc?: T;
              url?: T;
              href?: T;
              id?: T;
            };
        connect?: T;
      };
  secondaryNavigation?:
    | T
    | {
        menus?:
          | T
          | {
              label?: T;
              linkType?: T;
              doc?: T;
              url?: T;
              href?: T;
              id?: T;
            };
      };
  connect?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
      };
  newsletter?:
    | T
    | {
        title?: T;
        embedCode?: T;
      };
  analytics?:
    | T
    | {
        analyticsId?: T;
      };
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}

declare module "payload" {
  export interface GeneratedTypes extends Config {}
}
